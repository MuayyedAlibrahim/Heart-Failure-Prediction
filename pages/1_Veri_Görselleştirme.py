import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Sayfa yapÄ±landÄ±rmasÄ±
st.set_page_config(
    page_title="Veri GÃ¶rselleÅŸtirme - Kalp HastalÄ±ÄŸÄ± Analiz Platformu",
    page_icon="ğŸ“Š",
    layout="wide"
)

# Sayfa baÅŸlÄ±ÄŸÄ±
st.title("ğŸ“Š Veri GÃ¶rselleÅŸtirme")
st.markdown("Bu sayfada kalp hastalÄ±ÄŸÄ± veri setini Ã§eÅŸitli grafiklerle analiz edebilirsiniz.")

# Veri setini yÃ¼kleme
@st.cache_data
def load_data():
    data = pd.read_csv('heart_cleaned.csv')
    return data

df = load_data()

# Sidebar oluÅŸturma
st.sidebar.header("GÃ¶rselleÅŸtirme SeÃ§enekleri")

# GÃ¶rselleÅŸtirme kategorileri
visualization_category = st.sidebar.radio(
    "GÃ¶rselleÅŸtirme Kategorisi SeÃ§in",
    ["Demografik Analizler", "SaÄŸlÄ±k Parametreleri", "Ä°liÅŸki Analizleri"]
)

# Demografik Analizler
if visualization_category == "Demografik Analizler":
    st.header("Demografik Analizler")
    
    # Alt kategori seÃ§imi
    demographic_option = st.selectbox(
        "GÃ¶rselleÅŸtirme TÃ¼rÃ¼ SeÃ§in",
        ["YaÅŸ DaÄŸÄ±lÄ±mÄ±", "Cinsiyet DaÄŸÄ±lÄ±mÄ±", "YaÅŸ ve Cinsiyet Ä°liÅŸkisi"]
    )
    
    if demographic_option == "YaÅŸ DaÄŸÄ±lÄ±mÄ±":
        st.subheader("YaÅŸ DaÄŸÄ±lÄ±mÄ± ve Kalp HastalÄ±ÄŸÄ± Ä°liÅŸkisi")
        
        col1, col2 = st.columns(2)
        
        with col1:
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=df, x='YaÅŸ', bins=20, kde=True, ax=ax)
            ax.set_title("YaÅŸ DaÄŸÄ±lÄ±mÄ±")
            ax.set_xlabel("YaÅŸ")
            ax.set_ylabel("Frekans")
            st.pyplot(fig)
        
        with col2:
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=df, x='YaÅŸ', hue='KalpHastalÄ±ÄŸÄ±', bins=20, kde=True, ax=ax)
            ax.set_title("YaÅŸ DaÄŸÄ±lÄ±mÄ± ve Kalp HastalÄ±ÄŸÄ± Ä°liÅŸkisi")
            ax.set_xlabel("YaÅŸ")
            ax.set_ylabel("Frekans")
            st.pyplot(fig)
        
        # YaÅŸ gruplarÄ±na gÃ¶re analiz
        st.subheader("YaÅŸ GruplarÄ±na GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ±")
        
        # YaÅŸ gruplarÄ± oluÅŸturma
        df_temp = df.copy()
        df_temp['AgeGroup'] = pd.cut(df_temp['YaÅŸ'], bins=[20, 30, 40, 50, 60, 70, 80], labels=['20-30', '30-40', '40-50', '50-60', '60-70', '70-80'])
        
        # YaÅŸ gruplarÄ±na gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ±
        age_group_heart_disease = df_temp.groupby('AgeGroup')['KalpHastalÄ±ÄŸÄ±'].mean() * 100
        
        fig, ax = plt.subplots(figsize=(10, 6))
        age_group_heart_disease.plot(kind='bar', ax=ax, color='coral')
        ax.set_title("YaÅŸ GruplarÄ±na GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_xlabel("YaÅŸ Grubu")
        ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_ylim(0, 100)
        
        # DeÄŸerleri Ã§ubuklarÄ±n Ã¼zerine ekleme
        for i, v in enumerate(age_group_heart_disease):
            ax.text(i, v + 2, f"{v:.1f}%", ha='center')
            
        st.pyplot(fig)
        
        # YaÅŸ istatistikleri
        st.subheader("YaÅŸ Ä°statistikleri")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("Ortalama YaÅŸ", f"{df['YaÅŸ'].mean():.1f}")
        
        with col2:
            st.metric("Minimum YaÅŸ", int(df['YaÅŸ'].min()))
        
        with col3:
            st.metric("Maksimum YaÅŸ", int(df['YaÅŸ'].max()))
    
    elif demographic_option == "Cinsiyet DaÄŸÄ±lÄ±mÄ±":
        st.subheader("Cinsiyet DaÄŸÄ±lÄ±mÄ± ve Kalp HastalÄ±ÄŸÄ± Ä°liÅŸkisi")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Veri Ã§erÃ§evesinin bir kopyasÄ±nÄ± oluÅŸtur
            df_gender = df.copy()
            
            # SayÄ±sal deÄŸerler yerine metin deÄŸerlerini kullan
            df_gender['Cinsiyet_Label'] = df_gender['Cinsiyet'].map({1: 'Erkek', 0: 'KadÄ±n'})
                
            # Cinsiyet daÄŸÄ±lÄ±mÄ±
            gender_count = df_gender['Cinsiyet_Label'].value_counts()
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(gender_count, labels=gender_count.index, autopct='%1.1f%%', startangle=90, colors=['#66b3ff', '#ff9999'])
            ax.set_title("Cinsiyet DaÄŸÄ±lÄ±mÄ±")
            st.pyplot(fig)
            
            # Cinsiyet sayÄ±larÄ±
            for gender, count in gender_count.items():
                st.write(f"**{gender}:** {count} kiÅŸi ({count/len(df_gender)*100:.1f}%)")
        
        with col2:
            # Cinsiyet ve kalp hastalÄ±ÄŸÄ± iliÅŸkisi
            fig, ax = plt.subplots(figsize=(8, 6))
            sns.countplot(data=df_gender, x='Cinsiyet_Label', hue='KalpHastalÄ±ÄŸÄ±', ax=ax)
            ax.set_title("Cinsiyet ve Kalp HastalÄ±ÄŸÄ± Ä°liÅŸkisi")
            ax.set_xlabel("Cinsiyet")
            ax.set_ylabel("KiÅŸi SayÄ±sÄ±")
            st.pyplot(fig)
        
        # Cinsiyet bazÄ±nda kalp hastalÄ±ÄŸÄ± oranlarÄ±
        st.subheader("Cinsiyet BazÄ±nda Kalp HastalÄ±ÄŸÄ± OranlarÄ±")
        
        gender_heart_disease = df_gender.groupby(['Cinsiyet_Label', 'KalpHastalÄ±ÄŸÄ±']).size().unstack()
        gender_heart_disease_percent = gender_heart_disease.div(gender_heart_disease.sum(axis=1), axis=0) * 100
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("Cinsiyet BazÄ±nda Kalp HastalÄ±ÄŸÄ± SayÄ±larÄ±")
            st.dataframe(gender_heart_disease)
        
        with col2:
            st.write("Cinsiyet BazÄ±nda Kalp HastalÄ±ÄŸÄ± OranlarÄ± (%)")
            st.dataframe(gender_heart_disease_percent.round(1))
        
        # Cinsiyet bazÄ±nda kalp hastalÄ±ÄŸÄ± oranlarÄ± grafiÄŸi
        fig, ax = plt.subplots(figsize=(10, 6))
        gender_heart_disease_percent[1].plot(kind='bar', ax=ax, color='coral')
        ax.set_title("Cinsiyet BazÄ±nda Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_xlabel("Cinsiyet")
        ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_ylim(0, 100)
        
        # DeÄŸerleri Ã§ubuklarÄ±n Ã¼zerine ekleme
        for i, v in enumerate(gender_heart_disease_percent[1]):
            ax.text(i, v + 2, f"{v:.1f}%", ha='center')
            
        st.pyplot(fig)
    
    elif demographic_option == "YaÅŸ ve Cinsiyet Ä°liÅŸkisi":
        st.subheader("YaÅŸ ve Cinsiyet Ä°liÅŸkisi")
        
        # Veri hazÄ±rlama
        df_temp = df.copy()
        df_temp['Cinsiyet_Label'] = df_temp['Cinsiyet'].map({1: 'Erkek', 0: 'KadÄ±n'})
        
        # Cinsiyete gÃ¶re yaÅŸ daÄŸÄ±lÄ±mÄ±
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(data=df_temp, x='Cinsiyet_Label', y='YaÅŸ', ax=ax)
        ax.set_title("Cinsiyete GÃ¶re YaÅŸ DaÄŸÄ±lÄ±mÄ±")
        ax.set_xlabel("Cinsiyet")
        ax.set_ylabel("YaÅŸ")
        st.pyplot(fig)
        
        # Cinsiyete ve kalp hastalÄ±ÄŸÄ±na gÃ¶re yaÅŸ daÄŸÄ±lÄ±mÄ±
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.boxplot(data=df_temp, x='Cinsiyet_Label', y='YaÅŸ', hue='KalpHastalÄ±ÄŸÄ±', ax=ax)
        ax.set_title("Cinsiyete ve Kalp HastalÄ±ÄŸÄ±na GÃ¶re YaÅŸ DaÄŸÄ±lÄ±mÄ±")
        ax.set_xlabel("Cinsiyet")
        ax.set_ylabel("YaÅŸ")
        st.pyplot(fig)
        
        # YaÅŸ gruplarÄ± ve cinsiyet daÄŸÄ±lÄ±mÄ±
        st.subheader("YaÅŸ GruplarÄ± ve Cinsiyet DaÄŸÄ±lÄ±mÄ±")
        
        # YaÅŸ gruplarÄ± oluÅŸturma
        df_temp['AgeGroup'] = pd.cut(df_temp['YaÅŸ'], bins=[20, 30, 40, 50, 60, 70, 80], labels=['20-30', '30-40', '40-50', '50-60', '60-70', '70-80'])
        
        # YaÅŸ gruplarÄ± ve cinsiyet daÄŸÄ±lÄ±mÄ±
        age_gender_distribution = pd.crosstab(df_temp['AgeGroup'], df_temp['Cinsiyet_Label'])
        
        fig, ax = plt.subplots(figsize=(12, 6))
        age_gender_distribution.plot(kind='bar', ax=ax)
        ax.set_title("YaÅŸ GruplarÄ± ve Cinsiyet DaÄŸÄ±lÄ±mÄ±")
        ax.set_xlabel("YaÅŸ Grubu")
        ax.set_ylabel("KiÅŸi SayÄ±sÄ±")
        st.pyplot(fig)

# SaÄŸlÄ±k Parametreleri
elif visualization_category == "SaÄŸlÄ±k Parametreleri":
    st.header("SaÄŸlÄ±k Parametreleri Analizleri")
    
    # Alt kategori seÃ§imi
    health_param_option = st.selectbox(
        "GÃ¶rselleÅŸtirme TÃ¼rÃ¼ SeÃ§in",
        ["GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi", "Kolesterol ve Kan BasÄ±ncÄ±", "Kalp HÄ±zÄ± ve Egzersiz Angina", "ST EÄŸimi ve Oldpeak"]
    )
    
    if health_param_option == "GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi":
        st.subheader("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi Analizi")
        
        # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi aÃ§Ä±klamasÄ±
        st.markdown("""
       **GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipleri:**
       - **0**: Asemptomatik (ASY)  
       Hasta gÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± hissetmiyor ancak kalp hastalÄ±ÄŸÄ± belirtileri testlerde ortaya Ã§Ä±kabilir.
       - **1**: Atipik Angina (ATA)  
       GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± mevcut ama klasik anjina belirtilerine tam olarak uymuyor, kalp dÄ±ÅŸÄ± nedenler de olabilir.
       - **2**: Non-Anginal AÄŸrÄ± (NAP)  
       GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± var ancak kalp ile ilgili deÄŸil; genellikle kas, mide gibi baÅŸka kaynaklardan kaynaklanÄ±r.
       - **3**: Tipik Angina (TA)  
       Fiziksel aktiviteyle artan, dinlenmeyle azalan klasik gÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ±; kalp hastalÄ±ÄŸÄ± ile yÃ¼ksek oranda iliÅŸkilidir.
       """)
        
        # Veri Ã§erÃ§evesinin bir kopyasÄ±nÄ± oluÅŸtur
        df_chest_pain = df.copy()
        
        # SayÄ±sal deÄŸerler yerine metin deÄŸerlerini kullan
        chest_pain_mapping = {0: 'ASY', 1: 'ATA', 2: 'NAP', 3: 'TA'}
        df_chest_pain['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±_Label'] = df_chest_pain['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±TÃ¼rÃ¼'].map(chest_pain_mapping)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi daÄŸÄ±lÄ±mÄ±
            chest_pain_count = df_chest_pain['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±_Label'].value_counts()
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(chest_pain_count, labels=chest_pain_count.index, autopct='%1.1f%%', startangle=90, 
                  colors=['#ff9999', '#66b3ff', '#99ff99', '#ffcc99'])
            ax.set_title("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi DaÄŸÄ±lÄ±mÄ±")
            st.pyplot(fig)
        
        with col2:
            # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi ve kalp hastalÄ±ÄŸÄ± iliÅŸkisi
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.countplot(data=df_chest_pain, x='GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±_Label', hue='KalpHastalÄ±ÄŸÄ±', ax=ax)
            ax.set_title("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi ve Kalp HastalÄ±ÄŸÄ± Ä°liÅŸkisi")
            ax.set_xlabel("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi")
            ax.set_ylabel("KiÅŸi SayÄ±sÄ±")
            st.pyplot(fig)
        
        # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipine gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ±
        st.subheader("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipine GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ±")
        
        chest_pain_heart_disease = df_chest_pain.groupby(['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±_Label', 'KalpHastalÄ±ÄŸÄ±']).size().unstack()
        chest_pain_heart_disease_percent = chest_pain_heart_disease.div(chest_pain_heart_disease.sum(axis=1), axis=0) * 100
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipine GÃ¶re Kalp HastalÄ±ÄŸÄ± SayÄ±larÄ±")
            st.dataframe(chest_pain_heart_disease)
        
        with col2:
            st.write("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipine GÃ¶re Kalp HastalÄ±ÄŸÄ± OranlarÄ± (%)")
            st.dataframe(chest_pain_heart_disease_percent.round(1))
        
        # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipine gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ± grafiÄŸi
        fig, ax = plt.subplots(figsize=(10, 6))
        chest_pain_heart_disease_percent[1].plot(kind='bar', ax=ax, color='coral')
        ax.set_title("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipine GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_xlabel("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi")
        ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_ylim(0, 100)
        
        # DeÄŸerleri Ã§ubuklarÄ±n Ã¼zerine ekleme
        for i, v in enumerate(chest_pain_heart_disease_percent[1]):
            ax.text(i, v + 2, f"{v:.1f}%", ha='center')
            
        st.pyplot(fig)
    
    elif health_param_option == "Kolesterol ve Kan BasÄ±ncÄ±":
        st.subheader("Kolesterol ve Kan BasÄ±ncÄ± Analizi")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Kolesterol daÄŸÄ±lÄ±mÄ±
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=df, x='Kolesterol', bins=20, kde=True, ax=ax)
            ax.set_title("Kolesterol DaÄŸÄ±lÄ±mÄ±")
            ax.set_xlabel("Kolesterol (mg/dl)")
            ax.set_ylabel("Frekans")
            st.pyplot(fig)
            
            # Kolesterol istatistikleri
            st.write(f"**Ortalama Kolesterol:** {df['Kolesterol'].mean():.1f} mg/dl")
            st.write(f"**Minimum Kolesterol:** {df['Kolesterol'].min()} mg/dl")
            st.write(f"**Maksimum Kolesterol:** {df['Kolesterol'].max()} mg/dl")
        
        with col2:
            # Kan basÄ±ncÄ± daÄŸÄ±lÄ±mÄ±
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=df, x='Ä°stirahatKanBasÄ±ncÄ±', bins=20, kde=True, ax=ax)
            ax.set_title("Ä°stirahat Kan BasÄ±ncÄ± DaÄŸÄ±lÄ±mÄ±")
            ax.set_xlabel("Ä°stirahat Kan BasÄ±ncÄ± (mm Hg)")
            ax.set_ylabel("Frekans")
            st.pyplot(fig)
            
            # Kan basÄ±ncÄ± istatistikleri
            st.write(f"**Ortalama Kan BasÄ±ncÄ±:** {df['Ä°stirahatKanBasÄ±ncÄ±'].mean():.1f} mm Hg")
            st.write(f"**Minimum Kan BasÄ±ncÄ±:** {df['Ä°stirahatKanBasÄ±ncÄ±'].min()} mm Hg")
            st.write(f"**Maksimum Kan BasÄ±ncÄ±:** {df['Ä°stirahatKanBasÄ±ncÄ±'].max()} mm Hg")
        
        # Kolesterol ve kan basÄ±ncÄ± iliÅŸkisi
        st.subheader("Kolesterol ve Kan BasÄ±ncÄ± Ä°liÅŸkisi")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.scatterplot(data=df, x='Kolesterol', y='Ä°stirahatKanBasÄ±ncÄ±', hue='KalpHastalÄ±ÄŸÄ±', ax=ax)
        ax.set_title("Kolesterol ve Kan BasÄ±ncÄ± Ä°liÅŸkisi")
        ax.set_xlabel("Kolesterol (mg/dl)")
        ax.set_ylabel("Ä°stirahat Kan BasÄ±ncÄ± (mm Hg)")
        st.pyplot(fig)
    
    elif health_param_option == "Kalp HÄ±zÄ± ve Egzersiz Angina":
        st.subheader("Kalp HÄ±zÄ± ve Egzersiz Angina Analizi")
        
        col1, col2 = st.columns(2)
        
        with col1:
            # Maksimum kalp hÄ±zÄ± daÄŸÄ±lÄ±mÄ±
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=df, x='MaksimumKalpHÄ±zÄ±', bins=20, kde=True, ax=ax)
            ax.set_title("Maksimum Kalp HÄ±zÄ± DaÄŸÄ±lÄ±mÄ±")
            ax.set_xlabel("Maksimum Kalp HÄ±zÄ±")
            ax.set_ylabel("Frekans")
            st.pyplot(fig)
            
            # Maksimum kalp hÄ±zÄ± istatistikleri
            st.write(f"**Ortalama Maksimum Kalp HÄ±zÄ±:** {df['MaksimumKalpHÄ±zÄ±'].mean():.1f}")
            st.write(f"**Minimum Maksimum Kalp HÄ±zÄ±:** {df['MaksimumKalpHÄ±zÄ±'].min()}")
            st.write(f"**Maksimum Maksimum Kalp HÄ±zÄ±:** {df['MaksimumKalpHÄ±zÄ±'].max()}")
        
        with col2:
            # Egzersiz angina daÄŸÄ±lÄ±mÄ±
            df_temp = df.copy()
            df_temp['EgzersizAngina_Label'] = df_temp['EgzersizAnginasÄ±'].map({1: 'Evet', 0: 'HayÄ±r'})
            
            exercise_angina_count = df_temp['EgzersizAngina_Label'].value_counts()
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(exercise_angina_count, labels=exercise_angina_count.index, autopct='%1.1f%%', startangle=90, 
                  colors=['#99ff99', '#ff9999'])
            ax.set_title("Egzersiz Angina DaÄŸÄ±lÄ±mÄ±")
            st.pyplot(fig)
            
            # Egzersiz angina sayÄ±larÄ±
            for angina, count in exercise_angina_count.items():
                st.write(f"**{angina}:** {count} kiÅŸi ({count/len(df)*100:.1f}%)")
        
        # YaÅŸ ve maksimum kalp hÄ±zÄ± iliÅŸkisi
        st.subheader("YaÅŸ ve Maksimum Kalp HÄ±zÄ± Ä°liÅŸkisi")
        
        fig, ax = plt.subplots(figsize=(10, 6))
        sns.scatterplot(data=df, x='YaÅŸ', y='MaksimumKalpHÄ±zÄ±', hue='KalpHastalÄ±ÄŸÄ±', ax=ax)
        ax.set_title("YaÅŸ ve Maksimum Kalp HÄ±zÄ± Ä°liÅŸkisi")
        ax.set_xlabel("YaÅŸ")
        ax.set_ylabel("Maksimum Kalp HÄ±zÄ±")
        st.pyplot(fig)
    
    elif health_param_option == "ST EÄŸimi ve Oldpeak":
        st.subheader("ST EÄŸimi ve Oldpeak Analizi")
        
        # ST EÄŸimi aÃ§Ä±klamasÄ±
        st.markdown("""
        **ST EÄŸimi (ST_Slope):**
        - **0**: AÅŸaÄŸÄ± eÄŸimli (Down)  
        Egzersiz sÄ±rasÄ±nda ST segmenti aÅŸaÄŸÄ± doÄŸru eÄŸim gÃ¶steriyor. Bu durum genellikle kalp kasÄ±na yeterince oksijen gitmediÄŸini (iskemi) gÃ¶sterir ve **kalp hastalÄ±ÄŸÄ± riski yÃ¼ksektir**.
        - **1**: DÃ¼z (Flat)  
        ST segmenti egzersiz sÄ±rasÄ±nda dÃ¼z kalÄ±r. Bu da anormal bir durum olabilir ve **kalp hastalÄ±ÄŸÄ±na iÅŸaret edebilir**.
        - **2**: YukarÄ± eÄŸimli (Up)  
        Egzersiz sÄ±rasÄ±nda ST segmenti yukarÄ± eÄŸimlidir. Bu genellikle **normal** kabul edilir ve **kalp hastalÄ±ÄŸÄ± riski dÃ¼ÅŸÃ¼ktÃ¼r**.
        """)

        
        # Veri hazÄ±rlama
        df_temp = df.copy()
        st_slope_mapping = {0: 'Down', 1: 'Flat', 2: 'Up'}
        df_temp['ST_EÄŸimi_Label'] = df_temp['ST_EÄŸimi'].map(st_slope_mapping)
        
        col1, col2 = st.columns(2)
        
        with col1:
            # ST EÄŸimi daÄŸÄ±lÄ±mÄ±
            st_slope_count = df_temp['ST_EÄŸimi_Label'].value_counts()
            fig, ax = plt.subplots(figsize=(8, 8))
            ax.pie(st_slope_count, labels=st_slope_count.index, autopct='%1.1f%%', startangle=90, 
                  colors=['#99ff99', '#ffcc99', '#ff9999'])
            ax.set_title("ST EÄŸimi DaÄŸÄ±lÄ±mÄ±")
            st.pyplot(fig)
            
            # ST EÄŸimi sayÄ±larÄ±
            for slope, count in st_slope_count.items():
                st.write(f"**{slope}:** {count} kiÅŸi ({count/len(df)*100:.1f}%)")
        
        with col2:
            # ST Depresyonu daÄŸÄ±lÄ±mÄ±
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.histplot(data=df, x='STDepresyonu', bins=20, kde=True, ax=ax)
            ax.set_title("ST Depresyonu DaÄŸÄ±lÄ±mÄ±")
            ax.set_xlabel("ST Depresyonu")
            ax.set_ylabel("Frekans")
            st.pyplot(fig)
            
            # ST Depresyonu istatistikleri
            st.write(f"**Ortalama ST Depresyonu:** {df['STDepresyonu'].mean():.2f}")
            st.write(f"**Minimum ST Depresyonu:** {df['STDepresyonu'].min():.2f}")
            st.write(f"**Maksimum ST Depresyonu:** {df['STDepresyonu'].max():.2f}")
        
        # ST EÄŸimi ve kalp hastalÄ±ÄŸÄ± iliÅŸkisi
        st.subheader("ST EÄŸimi ve Kalp HastalÄ±ÄŸÄ± Ä°liÅŸkisi")
        
        st_slope_heart_disease = df_temp.groupby(['ST_EÄŸimi_Label', 'KalpHastalÄ±ÄŸÄ±']).size().unstack()
        st_slope_heart_disease_percent = st_slope_heart_disease.div(st_slope_heart_disease.sum(axis=1), axis=0) * 100
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("ST EÄŸimine GÃ¶re Kalp HastalÄ±ÄŸÄ± SayÄ±larÄ±")
            st.dataframe(st_slope_heart_disease)
        
        with col2:
            st.write("ST EÄŸimine GÃ¶re Kalp HastalÄ±ÄŸÄ± OranlarÄ± (%)")
            st.dataframe(st_slope_heart_disease_percent.round(1))
        
        # ST EÄŸimine gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ± grafiÄŸi
        fig, ax = plt.subplots(figsize=(10, 6))
        st_slope_heart_disease_percent[1].plot(kind='bar', ax=ax, color='coral')
        ax.set_title("ST EÄŸimine GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_xlabel("ST EÄŸimi")
        ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
        ax.set_ylim(0, 100)
        
        # DeÄŸerleri Ã§ubuklarÄ±n Ã¼zerine ekleme
        for i, v in enumerate(st_slope_heart_disease_percent[1]):
            ax.text(i, v + 2, f"{v:.1f}%", ha='center')
            
        st.pyplot(fig)
# Ä°liÅŸki Analizleri
elif visualization_category == "Ä°liÅŸki Analizleri":
    st.header("Ä°liÅŸki Analizleri")
    
    # Alt kategori seÃ§imi
    relation_option = st.selectbox(
        "GÃ¶rselleÅŸtirme TÃ¼rÃ¼ SeÃ§in",
        ["Korelasyon Matrisi", "Ã–zellik Ã–nem Analizi", "Ã‡oklu DeÄŸiÅŸken Analizi"]
    )
    
    if relation_option == "Korelasyon Matrisi":
        st.subheader("Ã–zellikler ArasÄ± Korelasyon Matrisi")
        
        # Kategorik deÄŸiÅŸkenleri sayÄ±sallaÅŸtÄ±rma
        df_corr = df.copy()
        
        # TÃ¼rkÃ§e sÃ¼tun adlarÄ±na gÃ¶re dÃ¼zenleme
        if 'Cinsiyet' in df_corr.columns:
            df_corr['Cinsiyet'] = df_corr['Cinsiyet'].astype(int)
        
        if 'GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±TÃ¼rÃ¼' in df_corr.columns:
            df_corr['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±TÃ¼rÃ¼'] = df_corr['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±TÃ¼rÃ¼'].astype(int)
        
        if 'Ä°stirahatEKG' in df_corr.columns:
            df_corr['Ä°stirahatEKG'] = df_corr['Ä°stirahatEKG'].astype(int)
        
        if 'EgzersizAnginasÄ±' in df_corr.columns:
            df_corr['EgzersizAnginasÄ±'] = df_corr['EgzersizAnginasÄ±'].astype(int)
        
        if 'ST_EÄŸimi' in df_corr.columns:
            df_corr['ST_EÄŸimi'] = df_corr['ST_EÄŸimi'].astype(int)
        
        # SayÄ±sal sÃ¼tunlarÄ± seÃ§me
        numeric_df = df_corr.select_dtypes(include=[np.number])
        
        # Korelasyon matrisini hesaplama
        corr = numeric_df.corr()
        
        # Korelasyon matrisini gÃ¶rselleÅŸtirme
        fig, ax = plt.subplots(figsize=(12, 10))
        mask = np.triu(np.ones_like(corr, dtype=bool))
        cmap = sns.diverging_palette(230, 20, as_cmap=True)
        sns.heatmap(corr, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0,
                    square=True, linewidths=.5, cbar_kws={"shrink": .5}, annot=True, fmt=".2f")
        ax.set_title("Ã–zellikler ArasÄ± Korelasyon Matrisi")
        st.pyplot(fig)
        
        st.markdown("""
        **Korelasyon Matrisi Yorumu:**
        
        Korelasyon matrisi, veri setindeki sayÄ±sal Ã¶zellikler arasÄ±ndaki iliÅŸkiyi gÃ¶sterir. 
        1'e yakÄ±n deÄŸerler gÃ¼Ã§lÃ¼ pozitif korelasyonu, -1'e yakÄ±n deÄŸerler gÃ¼Ã§lÃ¼ negatif korelasyonu, 
        0'a yakÄ±n deÄŸerler ise zayÄ±f veya hiÃ§ korelasyon olmadÄ±ÄŸÄ±nÄ± gÃ¶sterir.
        
        **Ã–nemli Korelasyonlar:**
        - **YaÅŸ ve Maksimum Kalp HÄ±zÄ±**: Negatif korelasyon - YaÅŸ arttÄ±kÃ§a maksimum kalp hÄ±zÄ± dÃ¼ÅŸme eÄŸilimindedir.
        - **ST Depresyonu ve ST EÄŸimi**: YÃ¼ksek korelasyon - ST eÄŸimi ile ST Depresyonu deÄŸeri arasÄ±nda gÃ¼Ã§lÃ¼ bir iliÅŸki vardÄ±r.
        - **Egzersiz Angina ve Kalp HastalÄ±ÄŸÄ±**: Pozitif korelasyon - Egzersiz sÄ±rasÄ±nda angina yaÅŸayanlarÄ±n kalp hastalÄ±ÄŸÄ± riski daha yÃ¼ksektir.
        """)
    
    elif relation_option == "Ã–zellik Ã–nem Analizi":
        st.subheader("Ã–zellik Ã–nem Analizi")
        
        st.write("""
        Bu analiz, hangi Ã¶zelliklerin kalp hastalÄ±ÄŸÄ± tahmini iÃ§in daha Ã¶nemli olduÄŸunu gÃ¶sterir.
        Ã–zellik Ã¶nem analizi iÃ§in basit bir lojistik regresyon modeli kullanÄ±lmÄ±ÅŸtÄ±r.
        """)
        
        # Veri setini hazÄ±rlama
        df_model = df.copy()
        
        # BaÄŸÄ±msÄ±z deÄŸiÅŸkenler ve hedef deÄŸiÅŸken
        if 'KalpHastalÄ±ÄŸÄ±' in df_model.columns:
            X = df_model.drop('KalpHastalÄ±ÄŸÄ±', axis=1)
            y = df_model['KalpHastalÄ±ÄŸÄ±']
        else:
            st.error("KalpHastalÄ±ÄŸÄ± sÃ¼tunu bulunamadÄ±!")
            st.stop()
        
        # Lojistik regresyon modeli
        from sklearn.linear_model import LogisticRegression
        from sklearn.preprocessing import StandardScaler
        
        # Verileri Ã¶lÃ§eklendirme
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)
        
        # Modeli eÄŸitme
        model = LogisticRegression(max_iter=1000, random_state=42)
        model.fit(X_scaled, y)
        
        # Ã–zellik Ã¶nemlerini hesaplama
        feature_importance = pd.DataFrame({
            'Feature': X.columns,
            'Importance': np.abs(model.coef_[0])
        })
        
        # Ã–zellik Ã¶nemlerini sÄ±ralama
        feature_importance = feature_importance.sort_values('Importance', ascending=False)
        
        # Ã–zellik Ã¶nemlerini gÃ¶rselleÅŸtirme
        fig, ax = plt.subplots(figsize=(12, 8))
        sns.barplot(data=feature_importance, x='Importance', y='Feature', ax=ax)
        ax.set_title("Ã–zellik Ã–nem Analizi")
        ax.set_xlabel("Ã–nem Derecesi")
        ax.set_ylabel("Ã–zellik")
        st.pyplot(fig)
        
        st.markdown("""
        **Ã–zellik Ã–nem Analizi Yorumu:**
        
        Bu grafik, her bir Ã¶zelliÄŸin kalp hastalÄ±ÄŸÄ± tahmini Ã¼zerindeki etkisini gÃ¶stermektedir. 
        Ã‡ubuk ne kadar uzunsa, o Ã¶zelliÄŸin modeldeki Ã¶nemi o kadar fazladÄ±r.
        
        **En Ã–nemli Ã–zellikler:**
        - GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi
        - ST eÄŸimi
        - Egzersiz angina
        - Maksimum kalp hÄ±zÄ±
        - ST depresyonu
        
        Bu Ã¶zellikler, kalp hastalÄ±ÄŸÄ± riskini deÄŸerlendirirken daha fazla dikkat edilmesi gereken faktÃ¶rlerdir.
        """)
    
    elif relation_option == "Ã‡oklu DeÄŸiÅŸken Analizi":
        st.subheader("Ã‡oklu DeÄŸiÅŸken Analizi")
        
        # Analiz tÃ¼rÃ¼ seÃ§imi
        multi_var_option = st.selectbox(
            "Analiz TÃ¼rÃ¼ SeÃ§in",
            ["YaÅŸ, Cinsiyet ve Kalp HastalÄ±ÄŸÄ±", "GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ±, Egzersiz Angina ve Kalp HastalÄ±ÄŸÄ±", 
             "Kolesterol, Kan BasÄ±ncÄ± ve Kalp HastalÄ±ÄŸÄ±", "YaÅŸ, Maksimum Kalp HÄ±zÄ± ve Kalp HastalÄ±ÄŸÄ±"]
        )
        
        if multi_var_option == "YaÅŸ, Cinsiyet ve Kalp HastalÄ±ÄŸÄ±":
            st.write("Bu analiz, yaÅŸ ve cinsiyet faktÃ¶rlerinin kalp hastalÄ±ÄŸÄ± riski Ã¼zerindeki etkisini gÃ¶sterir.")
            
            # YaÅŸ gruplarÄ± oluÅŸturma
            df['YaÅŸGrubu'] = pd.cut(df['YaÅŸ'], bins=[20, 30, 40, 50, 60, 70, 80], 
                                   labels=['20-30', '30-40', '40-50', '50-60', '60-70', '70-80'])
            
            # Cinsiyet etiketleri
            df['CinsiyetLabel'] = df['Cinsiyet'].map({1: 'Erkek', 0: 'KadÄ±n'})
            
            # YaÅŸ gruplarÄ±, cinsiyet ve kalp hastalÄ±ÄŸÄ± daÄŸÄ±lÄ±mÄ±
            age_sex_heart = pd.crosstab([df['YaÅŸGrubu'], df['CinsiyetLabel']], df['KalpHastalÄ±ÄŸÄ±'])
            age_sex_heart_percent = age_sex_heart.div(age_sex_heart.sum(axis=1), axis=0) * 100
            
            # Grafik
            fig, ax = plt.subplots(figsize=(14, 8))
            age_sex_heart_percent[1].unstack().plot(kind='bar', ax=ax)
            ax.set_title("YaÅŸ GruplarÄ± ve Cinsiyete GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_xlabel("YaÅŸ Grubu ve Cinsiyet")
            ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_ylim(0, 100)
            ax.legend(title="Cinsiyet")
            plt.xticks(rotation=45)
            
            st.pyplot(fig)
            
            st.markdown("""
            **Analiz Yorumu:**
            
            Bu grafik, farklÄ± yaÅŸ gruplarÄ± ve cinsiyetlere gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ±nÄ± gÃ¶stermektedir. 
            Genel olarak, yaÅŸ arttÄ±kÃ§a kalp hastalÄ±ÄŸÄ± riski artmaktadÄ±r. AyrÄ±ca, erkeklerde kalp hastalÄ±ÄŸÄ± riski 
            kadÄ±nlara gÃ¶re daha yÃ¼ksektir, Ã¶zellikle orta yaÅŸ gruplarÄ±nda bu fark daha belirgindir.
            """)
        
        elif multi_var_option == "GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ±, Egzersiz Angina ve Kalp HastalÄ±ÄŸÄ±":
            st.write("Bu analiz, gÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi ve egzersiz angina faktÃ¶rlerinin kalp hastalÄ±ÄŸÄ± riski Ã¼zerindeki etkisini gÃ¶sterir.")
            
            # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi etiketleri
            chest_pain_labels = {0: 'Tip 0', 1: 'Tip 1', 2: 'Tip 2', 3: 'Tip 3'}
            df['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±Label'] = df['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±TÃ¼rÃ¼'].map(chest_pain_labels)
            
            # Egzersiz angina etiketleri
            df['EgzersizAnginasÄ±Label'] = df['EgzersizAnginasÄ±'].map({1: 'Evet', 0: 'HayÄ±r'})
            
            # GÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipi, egzersiz angina ve kalp hastalÄ±ÄŸÄ± daÄŸÄ±lÄ±mÄ±
            chest_angina_heart = pd.crosstab([df['GÃ¶ÄŸÃ¼sAÄŸrÄ±sÄ±Label'], df['EgzersizAnginasÄ±Label']], df['KalpHastalÄ±ÄŸÄ±'])
            chest_angina_heart_percent = chest_angina_heart.div(chest_angina_heart.sum(axis=1), axis=0) * 100
            
            # Grafik
            fig, ax = plt.subplots(figsize=(14, 8))
            chest_angina_heart_percent[1].unstack().plot(kind='bar', ax=ax)
            ax.set_title("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi ve Egzersiz Anginaya GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_xlabel("GÃ¶ÄŸÃ¼s AÄŸrÄ±sÄ± Tipi ve Egzersiz Angina")
            ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_ylim(0, 100)
            ax.legend(title="Egzersiz Angina")
            plt.xticks(rotation=45)
            
            st.pyplot(fig)
            
            st.markdown("""
            **Analiz Yorumu:**
            
            Bu grafik, farklÄ± gÃ¶ÄŸÃ¼s aÄŸrÄ±sÄ± tipleri ve egzersiz angina durumlarÄ±na gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ±nÄ± gÃ¶stermektedir. 
            Egzersiz sÄ±rasÄ±nda angina yaÅŸayanlarÄ±n kalp hastalÄ±ÄŸÄ± riski belirgin ÅŸekilde daha yÃ¼ksektir.
            """)
        
        elif multi_var_option == "Kolesterol, Kan BasÄ±ncÄ± ve Kalp HastalÄ±ÄŸÄ±":
            st.write("Bu analiz, kolesterol ve kan basÄ±ncÄ± faktÃ¶rlerinin kalp hastalÄ±ÄŸÄ± riski Ã¼zerindeki etkisini gÃ¶sterir.")
            
            # Kolesterol gruplarÄ± oluÅŸturma
            df['KolesterolGrubu'] = pd.cut(df['Kolesterol'], 
                                          bins=[0, 200, 240, 600], 
                                          labels=['Normal (<200)', 'SÄ±nÄ±rda (200-240)', 'YÃ¼ksek (>240)'])
            
            # Kan basÄ±ncÄ± gruplarÄ± oluÅŸturma
            df['KanBasÄ±ncÄ±Grubu'] = pd.cut(df['Ä°stirahatKanBasÄ±ncÄ±'], 
                                          bins=[0, 120, 140, 200], 
                                          labels=['Normal (<120)', 'Prehipertansiyon (120-140)', 'Hipertansiyon (>140)'])
            
            # Kolesterol, kan basÄ±ncÄ± ve kalp hastalÄ±ÄŸÄ± daÄŸÄ±lÄ±mÄ±
            chol_bp_heart = pd.crosstab([df['KolesterolGrubu'], df['KanBasÄ±ncÄ±Grubu']], df['KalpHastalÄ±ÄŸÄ±'])
            chol_bp_heart_percent = chol_bp_heart.div(chol_bp_heart.sum(axis=1), axis=0) * 100
            
            # Grafik
            fig, ax = plt.subplots(figsize=(14, 8))
            chol_bp_heart_percent[1].unstack().plot(kind='bar', ax=ax)
            ax.set_title("Kolesterol ve Kan BasÄ±ncÄ± GruplarÄ±na GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_xlabel("Kolesterol ve Kan BasÄ±ncÄ± GruplarÄ±")
            ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_ylim(0, 100)
            ax.legend(title="Kan BasÄ±ncÄ±")
            plt.xticks(rotation=45)
            
            st.pyplot(fig)
            
            st.markdown("""
            **Analiz Yorumu:**
            
            Bu grafik, farklÄ± kolesterol ve kan basÄ±ncÄ± gruplarÄ±na gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ±nÄ± gÃ¶stermektedir. 
            YÃ¼ksek kolesterol ve hipertansiyon, kalp hastalÄ±ÄŸÄ± riskini artÄ±ran faktÃ¶rlerdir. Ã–zellikle her iki 
            faktÃ¶rÃ¼n de yÃ¼ksek olduÄŸu durumlarda kalp hastalÄ±ÄŸÄ± riski daha da artmaktadÄ±r.
            """)
        
        elif multi_var_option == "YaÅŸ, Maksimum Kalp HÄ±zÄ± ve Kalp HastalÄ±ÄŸÄ±":
            st.write("Bu analiz, yaÅŸ ve maksimum kalp hÄ±zÄ± faktÃ¶rlerinin kalp hastalÄ±ÄŸÄ± riski Ã¼zerindeki etkisini gÃ¶sterir.")
            
            # YaÅŸ gruplarÄ± oluÅŸturma
            df['YaÅŸGrubu'] = pd.cut(df['YaÅŸ'], bins=[20, 40, 60, 80], 
                                   labels=['GenÃ§ (20-40)', 'Orta YaÅŸ (40-60)', 'YaÅŸlÄ± (60-80)'])
            
            # Maksimum kalp hÄ±zÄ± gruplarÄ± oluÅŸturma
            df['KalpHÄ±zÄ±Grubu'] = pd.cut(df['MaksimumKalpHÄ±zÄ±'], 
                                        bins=[0, 120, 150, 220], 
                                        labels=['DÃ¼ÅŸÃ¼k (<120)', 'Normal (120-150)', 'YÃ¼ksek (>150)'])
            
            # YaÅŸ, maksimum kalp hÄ±zÄ± ve kalp hastalÄ±ÄŸÄ± daÄŸÄ±lÄ±mÄ±
            age_hr_heart = pd.crosstab([df['YaÅŸGrubu'], df['KalpHÄ±zÄ±Grubu']], df['KalpHastalÄ±ÄŸÄ±'])
            age_hr_heart_percent = age_hr_heart.div(age_hr_heart.sum(axis=1), axis=0) * 100
            
            # Grafik
            fig, ax = plt.subplots(figsize=(14, 8))
            age_hr_heart_percent[1].unstack().plot(kind='bar', ax=ax)
            ax.set_title("YaÅŸ ve Maksimum Kalp HÄ±zÄ± GruplarÄ±na GÃ¶re Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_xlabel("YaÅŸ ve Maksimum Kalp HÄ±zÄ± GruplarÄ±")
            ax.set_ylabel("Kalp HastalÄ±ÄŸÄ± OranÄ± (%)")
            ax.set_ylim(0, 100)
            ax.legend(title="Maksimum Kalp HÄ±zÄ±")
            plt.xticks(rotation=45)
            
            st.pyplot(fig)
            
            # YaÅŸ ve maksimum kalp hÄ±zÄ± iliÅŸkisi
            fig, ax = plt.subplots(figsize=(10, 6))
            sns.scatterplot(data=df, x='YaÅŸ', y='MaksimumKalpHÄ±zÄ±', hue='KalpHastalÄ±ÄŸÄ±', ax=ax)
            ax.set_title("YaÅŸ ve Maksimum Kalp HÄ±zÄ± Ä°liÅŸkisi")
            ax.set_xlabel("YaÅŸ")
            ax.set_ylabel("Maksimum Kalp HÄ±zÄ±")
            st.pyplot(fig)
            
            st.markdown("""
            **Analiz Yorumu:**
            
            Bu grafik, farklÄ± yaÅŸ gruplarÄ± ve maksimum kalp hÄ±zÄ± gruplarÄ±na gÃ¶re kalp hastalÄ±ÄŸÄ± oranÄ±nÄ± gÃ¶stermektedir. 
            YaÅŸ arttÄ±kÃ§a ve maksimum kalp hÄ±zÄ± dÃ¼ÅŸtÃ¼kÃ§e kalp hastalÄ±ÄŸÄ± riski artma eÄŸilimindedir. Ã–zellikle yaÅŸlÄ± 
            grupta ve dÃ¼ÅŸÃ¼k maksimum kalp hÄ±zÄ±na sahip kiÅŸilerde kalp hastalÄ±ÄŸÄ± riski daha yÃ¼ksektir.
            
            AyrÄ±ca, yaÅŸ ve maksimum kalp hÄ±zÄ± arasÄ±nda negatif bir korelasyon vardÄ±r, yani yaÅŸ arttÄ±kÃ§a maksimum 
            kalp hÄ±zÄ± dÃ¼ÅŸme eÄŸilimindedir.
            """)

# Footer
st.markdown("---")
st.markdown("Â© 2025 Kalp HastalÄ±ÄŸÄ± Analiz Platformu | Streamlit ile geliÅŸtirilmiÅŸtir.")
